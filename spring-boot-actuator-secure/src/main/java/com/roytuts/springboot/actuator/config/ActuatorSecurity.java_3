package com.roytuts.springboot.actuator.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class ActuatorSecurity {

	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http.securityMatcher(EndpointRequest.toAnyEndpoint());
		http.authorizeHttpRequests((authorize) -> authorize.anyRequest().hasRole("ADMIN"))
				.httpBasic(Customizer.withDefaults());
		return http.build();
	}

	/*@Bean
	public UserDetailsService userDetailsService() {
		UserDetails user = User.builder().username("user").password("{bcrypt}$2a$10$9Xn39aPf4LhDpRGNWvDFqu.T5ZPHbyh8iNQDSb4aNSnLqE2u2efIu")
				.roles("USER").build(); //user
		return new InMemoryUserDetailsManager(user);
	}*/

	
	@Autowired
	public void registerGlobal(AuthenticationManagerBuilder builder) throws Exception {
		builder.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder()).withUser("roy")
				.password("$2a$10$B18wGZhRjNau6ZBcI/NBQO6EEdJ7GyVvjjWfAK20ODz4B6LmXicRa").roles("ADMIN");
	}
	 
}
